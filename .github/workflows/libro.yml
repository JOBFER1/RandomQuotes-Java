name: Java Maven Build 
'on':
  workflow_dispatch: {}
  push: {}
jobs:
  build:
    runs-on: ubuntu-latest 
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.14 
      with:
        versionSpec: 5.x
    - id: determine_version 
      name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.14 
      with:
        additionalArguments: /overrideconfig mode=Mainline
    - name: Install Octopus Deploy CLI
      uses: OctopusDeploy/install-octopus-cli-action@vl 
      with:
        version: latest
    - name: Set up DDK 1.17 
      uses: actions/setup-java@v2 
      with:
        java-version: '17' 
        distribution: adopt
    - name: Set Version
      run: ./mvnw --batch-mode versions:set -DnewVersion=${{ steps.determine_version.outputs.semVer }} 
      shell: bash
    - name: Test
      run: ./mvnw --batch-mode test 
      shell: bash 
    - if: always() 
      name: Report
      uses: dorny/test-reporter@vl 
      with:
        name: Maven Tests
        path : target/surefire-reports/*.xml 
        reporter: java-junit 
        fail-on-error: 'false' 
    - name: Package
      run: ./mvnw --batch-mode -DskipTests=true package
      shell: bash
    - id: get_artifact
      name: Get Artifact Path
      run: |-
        # Find the largest WAR or DAR, and assume that was what we intended to build.
        echo "::set-output name=artifact: :$(find target -type f \( -iname \*.jar -o -iname \*.war \) -printf "%p\n" | sort -n | head -1)" 
        shell: bash 
    - id: get_artifact_name 
      name: Get Artifact Name 
      run: |-
        # Get the filename without a path
        path="${{ steps.get_artifact.outputs.artifact }}" 
        echo "::set-output name=artifact: :${path##*/}"
        shell: bash
    - id: get_octopus_artifact 
      name: Create Octopus Artifact 
      run: |-
        # Octopus expects artifacts to have a specific file format 
        file="${{ steps.get_artifact.outputs.artifact }}" 
        extension="${file##*.}"
        octofile="randomquotes.${{ steps.determine_version.outputs.semVer }}.${extension}" 
        cp ${file} ${octofile}
        echo "::set-output name=artifact: :${octofile}"
        # The version used when creating a release is the package id, colon, and version octoversion="randomquotes:${{ steps.determine_version.outputs.semVer }}"
        echo "::set-output name=octoversion: :${octoversion}"
        ls -la
        shell: bash
    - name: Push packages to Octopus Deploy 
      uses: 0ctopusDeploy/push-package-action@v2 
      env:
        OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_TOKEN }}
        OCTOPUS_HOST: ${{ secrets.OCTOPUS_SERVER_URL }} 
      with:
        overwrite_mode: OverwriteExisting
        packages: ${{ steps.get_octopus_artifact.outputs.artifact }} 

